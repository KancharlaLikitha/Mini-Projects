# -*- coding: utf-8 -*-
"""Design and Development of models for house price prediction task.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZruWqtUbyvBWWLmJjKSBy5KoQ_D4SJxF
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn import preprocessing
from sklearn.preprocessing import OneHotEncoder
from sklearn.linear_model import LinearRegression
from sklearn.tree import DecisionTreeRegressor
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import r2_score,mean_squared_error

df_train=pd.read_csv('train.csv')

print(f"train data: Rows={df_train.shape[0]},Columns={df_train.shape[1]}")

df_train.head()

df_train.info()

df_train['CITY']=df_train['ADDRESS'].apply(lambda x: x.split(',')[-1])
df_train['CITY']

train=df_train.drop(['ADDRESS','LONGITUDE','LATITUDE'],axis=1)

def map_city(city):
  if city in ['Ahmedabad', 'Bangalore', 'Chennai', 'Delhi', 'Hyderabad',
   'Kolkata', 'Mumbai', 'Pune', 'Maharashtra']:
    return 'tier1'
  elif city in ['Agra', 'Ajmer', 'Aligarh', 'Amravati', 'Amritsar', 'Asansol',
    'Aurangabad', 'Bareilly','Belgaum', 'Bhavnagar', 'Bhiwandi', 'Bhopal', 'Bhubaneswar','Bikaner', 'Bilaspur', 'Bokaro Steel City',
    'Chandigarh', 'Coimbatore', 'Cuttack', 'Dehradun', 'Dhanbad','Bhilai', 'Durgapur', 'Dindigul', 'Erode','Faridabad', 'Firozabad', 'Ghaziabad', 'Gorakhpur', 'Gulbarga',
    'Guntur', 'Gwalior', 'Gurgaon', 'Guwahati','Hamirpur', 'Hubliâ€“Dharwad', 'Indore', 'Jabalpur', 'Jaipur','Jalandhar', 'Jammu', 'Jamnagar', 'Jamshedpur',
    'Jhansi', 'Jodhpur', 'Kakinada', 'Kannur', 'Kanpur', 'Karnal','Kochi', 'Kolhapur', 'Kollam', 'Kozhikode''Kurnool', 'Ludhiana', 'Lucknow', 'Madurai', 'Malappuram',
    'Mathura', 'Mangalore', 'Meerut', 'Moradabad','Mysore', 'Nagpur', 'Nanded', 'Nashik', 'Nellore', 'Noida','Patna', 'Pondicherry', 'Purulia', 'Prayagra'
    'Raipur', 'Rajkot', 'Rajahmundry', 'Ranchi', 'Rourkela', 'Ratlam','Salem', 'Sangli', 'Shimla', 'Siliguri','Solapur', 'Srinagar', 'Surat', 'Thanjavur',
    'Thiruvananthapuram', 'Thrissur', 'Tiruchirappalli', 'Tirunelveli','Tiruvannamalai', 'Ujjain', 'Bijapur', 'Vadodara', 'Varanasi',
    'Vasai-Virar City', 'Vijayawada', 'Visakhapatnam','Vellore', 'Warangal']:
    return 'tier2'
  else:
    return 'tier3'

train['CITY']=train['CITY'].apply(map_city)

train.head()

label_encoder=preprocessing.LabelEncoder()

train['POSTED_BY']=label_encoder.fit_transform(train['POSTED_BY'])
train['CITY']=label_encoder.fit_transform(train['CITY'])
train['BHK_OR_RK']=label_encoder.fit_transform(train['BHK_OR_RK'])
train.head()

train['SQUARE_FT']=np.log(train['SQUARE_FT'])
train['SQUARE_FT'].head()

X=train.drop(['TARGET(PRICE_IN_LACS)'],axis=1)
y=train['TARGET(PRICE_IN_LACS)']

y.head()

X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.3,random_state=100)

print(X_train.shape)
print(y_train.shape)
print(X_test.shape)
print(y_test.shape)

#Linear Regression
lr=LinearRegression()
lr.fit(X_train,y_train)
y_pred=lr.predict(X_test)
y_pred

r2=r2_score(y_test,y_pred)
print('Accuracy of the linear regression model (R-Square value):',r2*100)

#Random Forest Regressor
rf_model=RandomForestRegressor(n_estimators=100,random_state=80)
rf_model.fit(X_train,y_train)
y_pred=rf_model.predict(X_test)
y_pred

r2=r2_score(y_test,y_pred)
print('Accuracy of the random forest regressor model (R-Square value):',r2*100)

#Decision Tree Regressor
dt=DecisionTreeRegressor()
dt.fit(X_train,y_train)
y_pred=dt.predict(X_test)
y_pred

r2=r2_score(y_test,y_pred)
print('Accuracy of the linear regression model (R-Square value):',r2*100)